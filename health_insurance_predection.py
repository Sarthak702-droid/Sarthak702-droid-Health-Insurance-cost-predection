# -*- coding: utf-8 -*-
"""Health insurance predection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12e2xHhMI_6Q7HNWvZ8VychcWUUEWbhtZ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from statsmodels.stats.outliers_influence import variance_inflation_factor
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LinearRegression , Ridge , Lasso
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error

df = pd.read_csv("medical_insurance.csv")
df.head()

df.shape

df.info()

df.isna().sum().sum()

df.duplicated().sum()

df.drop_duplicates(inplace=True)

df.shape

df.describe()

plt.figure(figsize = (5,5))
sns.pairplot(df , hue = 'charges' , palette = 'magma')
plt.show()

sns.pairplot(df, hue='region', palette='viridis')
plt.show()

df_col = df[["age" , "bmi" , "children" , "charges"]]
plt.figure(figsize=(10,8))
sns.heatmap(df_col.corr(),annot=True)
plt.show()

"""**Distrubution Of Age Value**"""

plt.figure(figsize=(6,6))
plt.hist(df["age"], bins=20 , edgecolor = 'black')
plt.xlabel("Age")
plt.ylabel("Frequency")
plt.title("Distrubution of Age")
plt.show()

"""**Analysisng the Sex Column**"""

plt.figure(figsize = (5,5))
sns.countplot(x = 'sex' , data = df)
plt.title("Sex Distrubution")
plt.show()

#Finding the number of male and female in the dataset
df['sex'].value_counts()

"""**BMI Distrubution**"""

plt.figure(figsize=(6,6))
plt.hist(df["bmi"], bins=20 , edgecolor = 'black')
plt.xlabel("BMI")
plt.ylabel("Frequency")
plt.title("Distrubution of BMI")
plt.show()

"""**Age Column**"""

plt.figure(figsize = (6,6))
sns.countplot(x = 'children' , data = df)
plt.title("Children Distrubution")
plt.show()

#Finding the number of male and female in the dataset
df['children'].value_counts()

#Finding the number of male and female in the dataset
df['smoker'].value_counts()

plt.figure(figsize = (5,5))
sns.countplot(x = 'smoker' , data = df)
plt.title("Smoking Distrubution")
plt.show()

plt.figure(figsize = (5,5))
sns.countplot(x = 'region' , data = df)
plt.title("region Distrubution")
plt.show()

df['region'].value_counts()

plt.figure(figsize=(6,6))
plt.hist(df["charges"], bins=20 , edgecolor = 'black')
plt.xlabel("Charges")
plt.ylabel("Frequency")
plt.title("Distrubution of Charges")
plt.show()

"""**Data Preprocessing**"""

#encoding the sex column
df.replace({"sex":{"male":0,"female":1}},inplace=True)

#encoding the smoker column
df.replace({"smoker":{"yes":0,"no":1}},inplace=True)

#encoding the region column
df.replace({"region":{"southeast":0,"southwest":1,"northeast":2,"northwest":3}},inplace=True)

copy_df = df.copy()

def calculate_vif(df):
    X = copy_df.select_dtypes(include=['float64', 'int64']).copy()
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    vif_copy_df = pd.DataFrame()
    vif_copy_df['Feature'] = X.columns
    vif_copy_df['VIF'] = [variance_inflation_factor(X_scaled, i) for i in range(X_scaled.shape[1])]
    return vif_copy_df.sort_values(by='VIF', ascending=False)



vif_data = calculate_vif(copy_df)
print("Initial VIF values:\n", vif_data)

# Iteratively drop features with VIF > 10
threshold = 10
while vif_data['VIF'].max() > threshold:
    drop_feat = vif_data.iloc[0]['Feature']
    print(f"Dropping '{drop_feat}' with VIF = {vif_data.iloc[0]['VIF']:.2f}")
    copy_df = copy_df.drop(columns=[drop_feat])
    vif_data = calculate_vif(copy_df)

print("\nFinal Selected Features:")
print(copy_df.columns.tolist())

x_train , x_test , y_train , y_test = train_test_split(df.drop("charges" , axis = 1) , df["charges"] , test_size = 0.2 , random_state = 42)

models = {
    "Linear Regression": LinearRegression(),
    "Ridge Regression": Ridge(alpha=1.0),
    "Lasso Regression": Lasso(alpha=0.1),
    "Decision Tree": DecisionTreeRegressor(random_state=42),
    "Random Forest": RandomForestRegressor(n_estimators=200, random_state=42),
    "XGBoost": XGBRegressor(n_estimators=200, learning_rate=0.1, random_state=42),
    "SVR": SVR(kernel="rbf", C=100, gamma=0.1, epsilon=0.1)
}
results = {}

for name, model in models.items():
    model.fit(x_train, y_train)
    y_pred = model.predict(x_test)

    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    results[name] = {"MSE": mse, "MAE": mae, "R2": r2}

results_df = pd.DataFrame(results).T
results_df

def plot_predicted_vs_actual(model_name, y_test, y_pred):
    plt.figure(figsize=(5,5))
    plt.scatter(y_test, y_pred, color="blue")
    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
    plt.xlabel("Actual CO2 Emissions")
    plt.ylabel("Predicted CO2 Emissions")
    plt.title(f"{model_name}: Predicted vs Actual")
    plt.show()

# Generate plots for each model
for name, model in models.items():
    y_pred = model.predict(x_test)
    plot_predicted_vs_actual(name, y_test, y_pred)

model = RandomForestRegressor(n_estimators=200, random_state=42)
model.fit(x_train, y_train)

y_pred = model.predict(x_test)

plot_predicted_vs_actual("Random Forest Regressior", y_test, y_pred)

sample_input = pd.Series(0, index=x_train.columns)
sample_input['age'] = 30
sample_input['sex'] = 1 # female
sample_input['bmi'] = 25.0
sample_input['children'] = 1
sample_input['smoker'] = 0 # yes
sample_input['region'] = 1 # southwest

input_data = sample_input.values.reshape(1, -1)

predicted_charges = models["Random Forest"].predict(input_data)

print(f"Predicted Medical Charges: ${predicted_charges[0]:.2f}")